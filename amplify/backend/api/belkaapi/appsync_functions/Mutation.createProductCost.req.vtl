#set( $input = {} )

## Authorization rule: { allow: owner, ownerField: "owner", identityClaim: "cognito:username" } **
#if( $ctx.stash.input.containsKey("owner") )
  $util.qr($input.put("owner", $ctx.stash.input.owner))
#end

## Authorization rule: { allow: owner, ownerField: "team", identityClaim: "cognito:username" } **
#if( $ctx.stash.input.containsKey("team") )
  $util.qr($input.put("team", $ctx.stash.input.team))
#end

## [Start] Setting "version" to 1. **
$util.qr($input.put("version", 1))
## [End] Setting "version" to 1. **

## Default values
$util.qr($input.put("price", 0))
$util.qr($input.put("clientPrice", 0))
$util.qr($input.put("amount", 0))
$util.qr($input.put("total", 0))

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($input.put("waybillId", $util.defaultIfNullOrBlank($ctx.stash.input.productWaybillId, $ctx.stash.waybillId)))
$util.qr($input.put("createdAt", $util.time.nowISO8601()))
$util.qr($input.put("updatedAt", $util.time.nowISO8601()))
$util.qr($input.put("__typename", "ProductCost"))
{
  "version": "2018-05-29",
  "operation": "PutItem",
  "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  "id":   $util.dynamodb.toDynamoDBJson($util.autoId())
} #end,
  "attributeValues": $util.dynamodb.toMapValuesJson($input),
  "condition": {
      "expression": "attribute_not_exists(#id)",
      "expressionNames": {
          "#id": "id"
    }
  }
}
## [End] Prepare DynamoDB PutItem Request. **