type Project
  @model(queries: { list: "listProjects" }, mutations: { create: "createProject", update: "updateProject" }, subscriptions: null)
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
    # { allow: owner, ownerField: "freelancers", operations: [create] }
    # {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
    # {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
  ])
{
  id: ID!
  owner: String
  team: [String!]
  managers: [String!]
  accauntants: [String!]
  warehousemans: [String!]
  freelancers: [String!]
  name: String
  description: String
  client: String
  status: ProjectStatus
  spec: Spec @connection
  createdAt: String
	updatedAt: String
}

enum ProjectStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  DELETED
  ARCHIVED
}

type Spec
  @model(queries: { get: "getSpec" }, mutations: { create: "createSpec" }, subscriptions: null)
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String]
  waybills: [Waybill!] @connection(name: "SpecWaybills")
}

type Waybill
  @model(queries: { get: "getWaybill" }, mutations: { create: "createWaybill", update: "updateWaybill" }, subscriptions: null)
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  number: String
  description: String
  contractor: String
  purchaseDate: String
  deliveryDate: String
  spec: Spec @connection(name: "SpecWaybills")
  products: [Product!] @connection(name: "WaybillProducts")
  status: WaybillStatus
  createdAt: String
	updatedAt: String
}

enum WaybillStatus {
  CREATED
  IN_PRODUCTION
  IN_PROCESSING
  IN_STOCK
  DELETED
  ARCHIVED
}

type Product
  @model(queries: null, mutations: { create: "createProduct", update: "updateProduct" }, subscriptions: null)
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  article: String
  name: String
  quantity: Int
  # TODO add connection with type ProductUnit, array in project
  unit: String
  costs: ProductCosts
  store: ProductStore
  info: ProductInfo
  link: String
  status: ProductStatus
  waybill: Waybill @connection(name: "WaybillProducts")
  createdAt: String
	updatedAt: String
}

enum ProductStatus {
  CREATED
  IN_PRODUCTION
  IN_PROCESSING
  IN_STOCK
  DELETED
  ARCHIVED
}

type ProductCosts {
  purchasePrice: Float
  clientPrice: Float
  price: Float
  amount: Float
}

type ProductStore {
  net: Float
  gross: Float
  size: ProductSize
  inStock: Boolean
  dimension: Float
  # TODO add connection with type CargoPlace, @model
  cargoPlaceNumber: Int
}

type ProductSize {
  w: Float
  l: Float
  h: Float
}

type ProductInfo {
  images: [String]
  description: String
}

type Subscription {
  onCreateProject(owner: String!): Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject(owner: String!, id: ID!): Project @aws_subscribe(mutations: ["updateProject"])
  onCreateWaybill(owner: String!, waybillSpecId: ID!): Waybill @aws_subscribe(mutations: ["createWaybill"])
  onUpdateWaybill(owner: String!, id: ID!): Waybill @aws_subscribe(mutations: ["updateWaybill"])
  onCreateProduct(owner: String!, productWaybillId: ID!): Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct(owner: String!, id: ID!): Product @aws_subscribe(mutations: ["updateProduct"])
}
