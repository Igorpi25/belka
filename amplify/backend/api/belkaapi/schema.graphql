type Project 
  @model 
  @auth(rules: [
    { allow: owner },
    # { allow: owner, ownerField: "managers", operations: [create, update, delete] },
    # { allow: owner, ownerField: "freelancers", operations: [create] }
    # {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
    # {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
  ])
{
  id: ID!
  owner: String
  name: String!
  description: String
  client: String
  status: ProjectStatus
  spec: Spec @connection
  managers: [String]
  accauntants: [String]
  warehousemans: [String]
  freelancers: [String]
  createdAt: String
	updatedAt: String
}

enum ProjectStatus {
  CREATED
  IN_PROGRESS
  CLOSED
  DELETED
  ARCHIVED
}

type Spec 
  @model 
  @auth(rules: [
    { allow: owner },
  ])
{
  id: ID!
  owner: String
  waybills: [Waybill] @connection(name: "SpecWaybills")
}

type Waybill 
  @model 
  @auth(rules: [
    { allow: owner },
  ])
{
  id: ID!
  owner: String
  number: String
  description: String
  contractor: String
  purchaseDate: String
  deliveryDate: String
  spec: Spec @connection(name: "SpecWaybills")
  items: [Item] @connection(name: "WaybillItems")
  status: WaybillStatus
  createdAt: String
	updatedAt: String
}

enum WaybillStatus {
  CREATED
  DELETED
  ARCHIVED
}

type Item 
  @model 
  @auth(rules: [
    { allow: owner },
  ])
{
  id: ID!
  article: String
  name: String
  count: ItemCount
  price: ItemPrice
  store: ItemStore
  additional: ItemAdditional
  status: ItemStatus
  waybill: Waybill @connection(name: "WaybillItems")
  createdAt: String
	updatedAt: String
}

enum ItemStatus {
  CREATED
  DELETED
  ARCHIVED
}

type ItemCount {
  count: Float
}

type ItemPrice {
  purchasePrice: Float
  price: Float
  amount: Float
}

type ItemStore {
  net: Float
  gross: Float
  size: ItemSize
}

type ItemSize {
  w: Float
  l: Float
  h: Float
}

type ItemAdditional {
  images: [String]
  description: String
}