## No Static Group Authorization Rules **


## No Dynamic Group Authorization Rules **


## [Start] Owner Authorization Checks **
#set( $isOwnerAuthorized = false )
## Authorization rule: { allow: owner, ownerField: "owner", identityClaim: "cognito:username" } **
#set( $allowedOwners0 = $util.defaultIfNull($ctx.args.input.owner, null) )
#set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
#if( $util.isList($allowedOwners0) )
  #foreach( $allowedOwner in $allowedOwners0 )
    #if( $allowedOwner == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
#end
#if( $util.isString($allowedOwners0) )
  #if( $allowedOwners0 == $identityValue )
    #set( $isOwnerAuthorized = true )
  #end
#end
#if( $util.isNull($allowedOwners0) && (! $ctx.args.input.containsKey("owner")) )
  $util.qr($ctx.args.input.put("owner", $identityValue))
  #set( $isOwnerAuthorized = true )
#end
## Authorization rule: { allow: owner, ownerField: "team", identityClaim: "cognito:username" } **
#set( $allowedOwners1 = $util.defaultIfNull($ctx.args.input.team, null) )
#set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
#if( $util.isList($allowedOwners1) )
  #foreach( $allowedOwner in $allowedOwners1 )
    #if( $allowedOwner == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
#end
#if( $util.isString($allowedOwners1) )
  #if( $allowedOwners1 == $identityValue )
    #set( $isOwnerAuthorized = true )
  #end
#end
#if( $util.isNull($allowedOwners1) && (! $ctx.args.input.containsKey("team")) )
  $util.qr($ctx.args.input.put("team", ["$identityValue"]))
  #set( $isOwnerAuthorized = true )
#end
## [End] Owner Authorization Checks **


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

## [Start] Setting "version" to 1. **
$util.qr($ctx.args.input.put("version", 1))
## [End] Setting "version" to 1. **

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put("status", $util.defaultIfNullOrBlank($ctx.args.input.status, "IN_PRODUCTION")))
$util.qr($context.args.input.put("systemState", "CREATED"))
$util.qr($context.args.input.put("createdAt", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put("updatedAt", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put("__typename", "Waybill"))
{
  "version": "2017-02-28",
  "operation": "PutItem",
  "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  "id":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
  "condition": {
      "expression": "attribute_not_exists(#id)",
      "expressionNames": {
          "#id": "id"
    }
  }
}
## [End] Prepare DynamoDB PutItem Request. **