type Project 
  @model 
  @auth(rules: [
    {allow: owner},
    # {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
    # {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
  ])
{
  id: ID!
  owner: String
  name: String!
  description: String
  client: String
  status: ProjectStatus
  waybills: [Waybill]
    @connection(name: "ProjectWaybills")
    # @auth(rules: [{ allow: owner }])
  createdAt: String
	updatedAt: String
}

enum ProjectStatus {
  CREATED
  IN_PROGRESS
  CLOSED
}

type Waybill 
  @model 
  @auth(rules: [
    {allow: owner},
    # {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
    # {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
  ])
{
  id: ID!
  owner: String
  number: String
  description: String
  contractor: String
  purchaseDate: String
  deliveryDate: String
  items: [Item]
  status: WaybillStatus
  project: Project @connection(name: "ProjectWaybills", keyField: "projectId")
  projectId: String
  createdAt: String
	updatedAt: String
}

enum WaybillStatus {
  CREATED
  CLOSED
}

type Item 
{
  id: ID!
  article: String
  name: String
  count: ItemCount
  price: ItemPrice
  store: ItemStore
  additional: ItemAdditional
  status: String
  createdAt: String
	updatedAt: String
}

type ItemCount {
  count: Float
}

type ItemPrice {
  purchasePrice: Float
  price: Float
  amount: Float
}

type ItemStore {
  net: Float
  gross: Float
  size: ItemSize
}

type ItemSize {
  w: Float
  l: Float
  h: Float
}

type ItemAdditional {
  images: [String]
  description: String
}