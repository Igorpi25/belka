type Project
  @model(queries: { list: "listProjects" }, mutations: { update: "updateProject", delete: "deleteProject" }, subscriptions: { level: ON })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
    # { allow: owner, ownerField: "freelancers", operations: [create] }
    # {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
    # {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
  ])
{
  id: ID!
  owner: String
  team: [String!]
  managers: [String!]
  accauntants: [String!]
  warehousemans: [String!]
  freelancers: [String!]
  name: String
  description: String
  client: String
  status: ProjectStatus
  spec: Spec @connection
  createdAt: String
	updatedAt: String
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

type Spec
  @model(queries: { get: "getSpec" }, mutations: null, subscriptions: null)
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String]
  waybills: [Waybill!] @connection(name: "SpecWaybills")
}

type Waybill
  @model(queries: { get: "getWaybill" }, mutations: { create: "createWaybill", update: "updateWaybill", delete: "deleteWaybill" }, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  number: String
  description: String
  contractor: String
  purchaseDate: String
  deliveryDate: String
  spec: Spec @connection(name: "SpecWaybills")
  waybillSpecId: ID!
  products: [Product!] @connection(name: "WaybillProducts")
  status: WaybillStatus
  profitType: WaybillProfitType
  profitPercent: Float
  profitForAll: Boolean
  discount: Int
  prepayment: Float
  prepaymentDate: String
  residue: Float
  residueDate: String
  customerDebt: Float
  customerDebtDate: String
  createdAt: String
	updatedAt: String
}

enum WaybillProfitType {
  MARGIN
  COMMISSION
}

enum WaybillStatus {
  IN_PRODUCTION
  IN_PROCESSING
  IN_STOCK
}

type Product
  @model(queries: null, mutations: { update: "updateProduct", delete: "deleteProduct" }, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  article: String
  name: String
  quantity: Int
  # TODO add connection with type ProductUnit, array in project
  unit: String
  cost: ProductCost @connection(name: "ProductCost")
  store: ProductStore @connection(name: "ProductStore")
  info: ProductInfo @connection(name: "ProductInfo")
  link: ProductLink @connection(name: "ProductLink")
  status: ProductStatus
  waybill: Waybill @connection(name: "WaybillProducts")
  productWaybillId: ID!
  createdAt: String
	updatedAt: String
}

enum ProductStatus {
  IN_PRODUCTION
  IN_PROCESSING
  IN_STOCK
}

type ProductCost
  @model(queries: null, mutations: null, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  price: Float
  amount: Float
  clientPrice: Float
  clientAmount: Float
  product: Product @connection(name: "ProductCost")
  # need for filter on subscription
  waybillId: ID!
}

type ProductStore
  @model(queries: null, mutations: { update: "updateProductStore" }, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  net: Float
  gross: Float
  width: Float
  height: Float
  length: Float
  inStock: Boolean
  dimension: Float
  # TODO add connection with type CargoPlace, @model
  cargoPlaceNumber: Int
  product: Product @connection(name: "ProductStore")
  # need for filter on subscription
  waybillId: ID!
}

type ProductInfo
  @model(queries: null, mutations: { update: "updateProductInfo" }, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  images: [String]
  description: String
  product: Product @connection(name: "ProductInfo")
  # need for filter on subscription
  waybillId: ID!
}

type ProductLink
  @model(queries: null, mutations: { update: "updateProductLink" }, subscriptions: { level: OFF })
  @versioned
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "team" },
  ])
{
  id: ID!
  owner: String
  team: [String!]
  url: String
  product: Product @connection(name: "ProductLink")
  # productLinkProductId: ID
  # need for filter on subscription
  waybillId: ID!
}

type Subscription {
  onCreateWaybill(owner: ID!, waybillSpecId: ID!): Waybill @aws_subscribe(mutations: ["createWaybill"])
  onUpdateWaybill(owner: ID!, waybillSpecId: ID!): Waybill @aws_subscribe(mutations: ["updateWaybill", "publishWaybillUpdate"])
  onDeleteWaybill(owner: ID!, waybillSpecId: ID!): Waybill @aws_subscribe(mutations: ["deleteWaybill"])
  onCreateProduct(owner: ID!, productWaybillId: ID!): Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct(owner: ID!, productWaybillId: ID!): Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct(owner: ID!, productWaybillId: ID!): Product @aws_subscribe(mutations: ["deleteProduct"])
  onUpdateProductCost(owner: ID!, waybillId: ID!): ProductCost @aws_subscribe(mutations: ["updateProductCost"])
  onUpdateProductStore(owner: ID!, waybillId: ID!): ProductStore @aws_subscribe(mutations: ["updateProductStore"])
  onUpdateProductInfo(owner: ID!, waybillId: ID!): ProductInfo @aws_subscribe(mutations: ["updateProductInfo"])
  onUpdateProductLink(owner: ID!, waybillId: ID!): ProductLink @aws_subscribe(mutations: ["updateProductLink"])
  onCreateProject(owner: ID!): Project @aws_subscribe(mutations: ["createProject"])
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
  createProduct(input: CreateProductInput!): Product
  updateProductCost(input: UpdateProductCostInput!): ProductCost
  publishWaybillUpdate(owner: ID!, id: ID!): Waybill
}

input CreateProjectInput {
  id: ID
  owner: String
  team: [String!]
  managers: [String!]
  accauntants: [String!]
  warehousemans: [String!]
  freelancers: [String!]
  name: String
  description: String
  client: String
  status: ProjectStatus
  createdAt: String
  updatedAt: String
  projectSpecId: ID
}

input CreateProductInput {
  id: ID
  owner: String
  team: [String!]
  article: String
  name: String
  quantity: Int
  unit: String
  status: ProductStatus
  productWaybillId: ID!
  createdAt: String
  updatedAt: String
  productCostId: ID
  productStoreId: ID
  productInfoId: ID
  productLinkId: ID
}

input UpdateProductCostInput {
  id: ID!
  owner: String
  team: [String!]
  price: Float
  amount: Float
  clientPrice: Float
  clientAmount: Float
  productId: ID
  waybillId: ID
}
